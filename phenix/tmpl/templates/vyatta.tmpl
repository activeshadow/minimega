interfaces {
    {{ range .Interface }}
    {{/* TODO: need to determine loop.index */}}
    ethernet eth{{ .FIXME }} {
        address {{ .Address }}/{{ .Mask }}
        duplex auto
        mtu {{ .MTU }}
        {{ if eq .Proto "OSPF" }}
        ip {
            ospf {
                dead-interval {{ .DeadInterval }}
                hello-interval {{ .HelloInterval }}
                retransmit-interval {{ .RetransInterval }}
                transmit-delay 1
            }
        }
        {{ end }}
        {{ if .Rulesets }}
        firewall {
            {{ range .Ruleset }}
                {{/* TODO: need to understand acl.filter_type */}}
                {{/* maybe we do this as function handler */}}
                {{/* if eq .FIXME "send" */}}
                {{ $filter = "out" }}
                {{/* else if eq .FIXME "receive" */}}
                {{ $filter = "in" }}
                {{ end }}
                {{ $filter }} {
                    name {{ .Ruleset.Name }}
                }
            {{ end }}
        }
        {{ end }}
        {{/* TODO: need to determine router.loopback_ip */}}
        {{ if ne .FIXME "None" }}
        loopback lo {
            address {{ .FIXME }}/{{ .FIXME }}
        }
        {{ end }}
    }
    {{ end }}
}

{{ $nat := 10 }}
nat {
{{ range .Interface }}
   {{/* TODO: need to determine length of nat_config */}}
   {{ if gt .FIXME 0 }}
   source {
       rule {{ $n }} {
           {{/* TODO: need to determine nat_config */}}
           {{ ifaceNum := .FIXME }}
           outbound-interface eth{{ .FIXME }}
           {{ if ne .FIXME "" }}
           source {
               address {{ .FIXME }}/{{ .FIXME }}
           }
           {{ end }}
           translation {
               {{ if eq .FIXME "overload" }}
               address masquerade
               {{ else if eq .FIXME "static" }}
               address {{ .FIXME }}
               {{ end }}
           }
       }
       {{ $n += 1 }}
   }
    {{ end }}
{{ end }}
}

{{ $hasFirewall := false }}
{{ range .Rulesets }}
    {{ if .Ruleset.Default }}
    {{ $hasFirewall = true }}
firewall {
    {{ end }}
    {{ if .Ruleset.Default }}
    name {{ .Ruleset.Name }} {
        default-action {{ .Ruleset.Default }}
        {{/* Not sure why there is another if statement in the mako */}}
        description "{{ .Ruleset.Description }}"
        {{ range .Rules }}
        rule {{ .Rule.ID }} {
            action {{ .Rule.Action }}
            {{/* Also not sure why this if statement is in the mako */}}
            {{ if .Ruleset.Default }}
            description "{{ .Rule.Description }}
            {{ end }}
            {{ if .Rule.Source.Address }}
            protocol {{ .Rule.Protocol }}
            source {
                address {{ .Rule.Source.Address }}
                {{ if .Rule.Source.Port }}
                port {{ .Rule.Source.Port }}
                {{ end }}
            }
            {{ end }}
            {{ if .Rule.Destination.Address }}
            destination {
                address {{ .Rule.Destination.Address }}
                {{ if .Rule.Destination.Port }}
                port {{ .Rule.Destination.Port }}
                {{ end }}
            }
            {{ end }}
        }
        {{ end }}
    }
    {{ end }}
    {{ if $hasFirewall && if .FIXME }}
}
    {{ end }}
{{ end }}

{{/* Do we need the following? */}}
protocols {
    static {
        {{ range .Routes }}
        route {{ .Route.Destination }} {
            next-hop {{ .Route.Next }} {
                distance {{ .Route.Cost }}
            }
        }
        {{ end }}
    }

    ospf {
        {{ range .Areas }}
        area {{ .Area.AreaID }} {
            {{ range .Area.AreaNetworks }}
            {{/* This may be a cidr/int instead of string */}}
            network {{ .AreaNetwork.Network }}
            {{ end }}
        }
        parameters {
            router-id {{ .OSPF.RouterID }}
        }
        redistribute {
            {{/* TODO: need to determine ospf_bgp_redis */}}
            {{ if .FIXME }}
            bgp {
                {{/* See lines 146-148 on vyatta.mako */}}
            }
            {{ end }}
            {{/* TODO: need to determine ospf_connected_redis */}}
            {{ if .FIXME }}
            connected {

            }
            {{ end }}
            {{/* TODO: need to determine ospf_static_redis */}}
            {{ if .FIXME }}
            static {

            }
            {{ end }}
        }
    }

    {{/* TODO: need to determine length of router.bgp */}}
    {{ if gt .FIXME 0 }}
    {{/* TODO: need to determine as_number */}}
    bgp {{ .FIXME }} {
        {{/* TODO: need to determine neighbors */}}
        {{ range .FIXME }}
        neighbor {{ .FIXME }} {
            nexthop-self
            remote-as {{ .FIXME }}
        }
        {{ end }}

        redistribute {
            {{/* TODO: need to determine ospf_redis */}}
            {{ if .FIXME }}
            ospf {

            }
            {{ end }}
            {{/* TODO: need to determine static_redis */}}
            {{ if .FIXME }}
            static {

            }
            {{ end }}
            {{/* TODO: need to determine connected_redis */}}
            {{ if .FIXME }}
            connected {

            }
            {{ end }}
            {{/* TODO: need to determine rip_redis */}}
            {{ if .FIXME }}
            rip {

            }
            {{ end }}
        }
    }
    {{ end }}
}
{{/* end protocol block */}}

{{/* TODO: need to add Ipsec VPN content */}}

system {
    host-name {{ .RouterName }}
    ntp {
        {{/* TODO: need to determine ntp server address */}}
        server {{ .FIXME }} {
            perfer
        }
    }
}
/* Warning: Do not remove the following line. */
/* === vyatta-config-version: "dhcp-relay@1:vrrp@1:zone-policy@1:content-inspection@3:webproxy@1:quagga@2:webgui@1:wanloadbalance@3:ipsec@3:firewall@4:conntrack-sync@1:cluster@1:system@4:qos@1:nat@3:dhcp-server@4:config-management@1" === */
/* Release version: VC6.3-2011.07.21 */